// Code generated by MockGen. DO NOT EDIT.
// Source: parser.go

// Package mockparser is a generated GoMock package.
package mockparser

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	metric "github.com/kuzhukin/metrics-collector/internal/metric"
)

// MockRequestParser is a mock of RequestParser interface.
type MockRequestParser struct {
	ctrl     *gomock.Controller
	recorder *MockRequestParserMockRecorder
}

// MockRequestParserMockRecorder is the mock recorder for MockRequestParser.
type MockRequestParserMockRecorder struct {
	mock *MockRequestParser
}

// NewMockRequestParser creates a new mock instance.
func NewMockRequestParser(ctrl *gomock.Controller) *MockRequestParser {
	mock := &MockRequestParser{ctrl: ctrl}
	mock.recorder = &MockRequestParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestParser) EXPECT() *MockRequestParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockRequestParser) Parse(r *http.Request) (*metric.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", r)
	ret0, _ := ret[0].(*metric.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Parse indicates an expected call of Parse.
func (mr *MockRequestParserMockRecorder) Parse(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockRequestParser)(nil).Parse), r)
}
